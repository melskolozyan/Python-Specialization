'''This application will read roster data in JSON format, parse the file, and then produce an SQLite database that
contains a User, Course, and Member table and populate the tables from the data file.

You can base your solution on this code: http://www.pythonlearn.com/code/roster.py - this code is incomplete as you
need to modify the program to store the role column in the Member table to complete the assignment.

Each student gets their own file for the assignment. Download this file and save it as roster_data.json. Move the
downloaded file into the same folder as your roster.py program.

Once you have made the necessary changes to the program and it has been run successfully reading the above JSON data,
run the following SQL command:

SELECT hex(User.name || Course.title || Member.role ) AS X FROM
    User JOIN Member JOIN Course
    ON User.id = Member.user_id AND Member.course_id = Course.id
    ORDER BY X
Find the first row in the resulting record set and enter the long string that looks like 53656C696E613333.'''

# Desired output
# 41617279616E736931313030

import json
import sqlite3

file = sqlite3.connect('roster1.sqlite')
cur = file.cursor()

# lines 9-25 Drop existing tables with these name and create new ones. Table Member is an in-between table to
# simplify a many-to-many relationship into several one-to-many ones.
cur.executescript('''
DROP TABLE IF EXISTS User;
DROP TABLE IF EXISTS Member;
DROP TABLE IF EXISTS Course;

CREATE TABLE USER(
  id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT UNIQUE,
  name TEXT UNIQUE
);
CREATE TABLE Course(
  id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT UNIQUE,
  title TEXT UNIQUE
);
CREATE TABLE Member(
  user_id INTEGER,
  course_id INTEGER,
  role INTEGER,
  PRIMARY KEY (user_id, course_id)
)''')

# lines 30- 38 read the json file, parse it, find the name, course and role items and print them
fn = raw_input('Enter file name: ')
if len(fn) < 1: fn = 'roster_data_sample.json'
fn = open(fn).read()
js = json.loads(fn)
for i in js:
    name = i[0]
    course = i[1]
    role = i[2]
    print course, name, role
    # Insert the retrieved values into the tables and pass the Foreign keys to the Member table
    cur.execute('INSERT OR IGNORE INTO User(name) VALUES (?)', (name, ))
    cur.execute('SELECT id FROM User WHERE name = ?', (name, ))
    user_id = cur.fetchone()[0]

    cur.execute('INSERT OR IGNORE INTO Course(title) VALUES (?)', (course, ))
    cur.execute('SELECT id FROM Course WHERE title = ?', (course, ))
    course_id = cur.fetchone()[0]

    cur.execute('''INSERT OR REPLACE INTO Member
                (user_id, course_id, role) VALUES (?, ?, ?)''', (user_id, course_id, role))

    file.commit()

# SELECT Course.title, User.name, Member.role FROM User JOIN Course JOIN Member
# ON Member.course_id = Course.id AND Member.user_id = User.id ORDER BY Course.title, Member.role DESC, User.name
